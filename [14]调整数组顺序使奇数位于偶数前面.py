# -*- coding: utf-8 -*-
'''
输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
'''

def reOrder(array):
    if len(array) <= 1:
        return array
    odd = []
    even = []
    for x in array:
        if x % 2 == 0:
            even.append(x)
        else:
            odd.append(x)
    return odd + even

'''
思路：直接遍历，识别到偶数则跟最末尾的奇数对调。直到奇数偶数位置重叠
边界：长度0，长度1，全奇数，全偶数，偶数+奇数，偶数+奇数+偶数+奇数
'''
# 测试用例
print('输入：%s，输出：%s，答案：%s' % ([], reOrder([]), []))
print('输入：%s，输出：%s，答案：%s' % ([1], reOrder([1]), [1]))
print('输入：%s，输出：%s，答案：%s' % ([1,3,1,3,5], reOrder([1,3,1,3,5]), [1,3,1,3,5]))
print('输入：%s，输出：%s，答案：%s' % ([2,4,6,4,2], reOrder([2,4,6,4,2]), [2,4,6,4,2]))
print('输入：%s，输出：%s，答案：%s' % ([2,4,6,4,2,3,1,3,5], reOrder([2,4,6,4,2,3,1,3,5]), [3,1,3,5,2,4,6,4,2]))
print('输入：%s，输出：%s，答案：%s' % ([2,4,2,3,1,6,4,3,5], reOrder([2,4,2,3,1,6,4,3,5]),[3,1,3,5,2,4,2,6,4]))
